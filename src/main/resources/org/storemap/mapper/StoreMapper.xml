<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.storemap.mapper.StoreMapper">
	<resultMap id="storeMap" type="org.storemap.domain.StoreVO">
		<id property="store_idx" column="store_idx"/>
		<result property="member_idx" column="member_idx"/>
		<result property="store_name" column="store_name"/>
		<result property="store_image" column="store_image"/>
		<result property="store_num" column="store_num"/>
		<result property="store_email" column="store_email"/>
		<result property="store_address" column="store_address"/>
		<result property="store_area" column="store_area"/>
		<result property="store_activity_time" column="store_activity_time"/>
		<result property="store_content" column="store_content"/>
		<result property="store_like_cnt" column="store_like_cnt"/>
		<result property="store_hidden" column="store_hidden"/>
		<result property="store_rnum" column="store_rnum"/>
		<result property="store_lat" column="store_lat"/>
		<result property="store_lng" column="store_lng"/>
		<result property="store_regcode" column="store_regcode"/>
		<result property="store_open" column="store_open"/>
		<association property="attach" resultMap="attachMap"/>
	</resultMap>
	<resultMap id="attachMap" type="org.storemap.domain.AttachFileVO">
		<id property="attach_idx" column="attach_idx"/>
		<result property="filename" column="filename"/>
		<result property="uuid" column="uuid"/>
	</resultMap>

	<!-- 1.점포 생성  -->
	<insert id="insert" parameterType="org.storemap.domain.StoreVO">
		insert into store (
			store_idx,
			member_idx,
			store_name,
			store_image,
			store_num,
			store_email,
			store_address,
			store_area,
			store_activity_time,
			store_content,
			store_rnum,
			store_regcode,
			store_lat,
			store_lng
		)
		values(
	 		store_seq.nextval,
	 		#{member_idx},
	 		#{store_name},
	 		#{store_image},
	 		#{store_num},
	 		#{store_email},
	 		#{store_address},
	 		#{store_area},
	 		#{store_activity_time},
	 		#{store_content},
	 		#{store_rnum},
	 		#{store_regcode},
	 		#{store_lat},
	 		#{store_lng}
	 	)
	</insert>
	<!-- 2.점포 관리  -->
	<update id="update" parameterType="org.storemap.domain.StoreVO">
		update store set 
	 	store_name = #{store_name},
	 	store_image = #{store_image},
	 	store_num = #{store_num},
	 	store_email = #{store_email},
	 	store_address = #{store_address},
	 	store_area = #{store_area},
	 	store_activity_time = #{store_activity_time},
	 	store_content = #{store_content},
	 	store_rnum = #{store_rnum},
	 	store_lat = #{store_lat},
	 	store_lng = #{store_lng},
	 	store_regcode = #{store_regcode}
	 	where store_idx = #{store_idx}
	</update>
	<!-- 3.점포 삭제1 -->
	<delete id="delete" parameterType="int">
		delete from store where store_idx = #{store_idx}
	</delete>
	<!-- 3.점포 삭제2 -->
	<delete id="deleteStore" parameterType="int">
		delete from store where member_idx = #{member_idx}
	</delete>
	<!-- 4.점포 전체 보기  -->
	<select id="getStoreList" resultType="org.storemap.domain.StoreVO">
		select * from store
	</select>
	<!-- 5.숨긴 점포 전체 보기  -->
	<select id="getStoreHiddenList" resultMap="storeMap">
		SELECT s.*, a.filename
		FROM store s
		LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
		WHERE store_hidden = 1
	</select>
	<!-- 6.점포 전체 조인 보기 -->
	<select id="getStoreMap" resultMap="storeMap">
		SELECT s.*, a.filename
		FROM store s
		LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
	</select>
	<!-- 7.점포 자세히 보기  -->
	<select id="read" parameterType="int" resultMap="storeMap">
	    SELECT s.*, a.filename, a.uuid, a.attach_idx
	    FROM store s
	    LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
	    WHERE s.store_idx = #{store_idx}
	</select>
	<!-- 8.점포 조인 자세히 보기 -->
	<select id="map" parameterType="int" resultMap="storeMap">
		SELECT s.*, a.filename
		FROM store s
		LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
		WHERE s.store_idx = #{store_idx}
	</select>
	<!-- 9.회원 번호로 점포 정보 가져오기  -->
	<select id="getStore" parameterType="int" resultType="org.storemap.domain.StoreVO">
		select * from store where member_idx = #{member_idx}
	</select>
	<!-- 10.같은 회원정보를 가진 점포가 있는지 검증 -->
	<select id="getMember" parameterType="int" resultType="org.storemap.domain.StoreVO">
		select member_idx from store where member_idx = #{member_idx}
	</select>
	<!-- 11.점포 숨기기 등록 -->
	<update id="hideStore" parameterType="int">
		update store set 
			store_hidden = 1
		where store_idx = #{store_idx}
	</update>
	<!-- 12.점포 숨기기 해제 -->
	<update id="unhideStore" parameterType="int">
		update store set 
			store_hidden = 0
		where store_idx = #{store_idx}
	</update>
	<!-- 13.점포 시작! -->
	<update id="storeStart" parameterType="int">
		update store set 
			store_open = 1
		where store_idx = #{store_idx}
	</update>
	<!-- 14.점포 철수! -->
	<update id="storeStop" parameterType="int">
		update store set 
			store_open = 0
		where store_idx = #{store_idx}
	</update>
	<!-- 15.점포 좋아요 업 -->
	<update id="updateFavorite" parameterType="int">
		update store set
			store_like_cnt = store_like_cnt + 1
		where store_idx = #{store_idx}
	</update>
	<!-- 16.점포 좋아요 다운 -->
	<update id="deleteFavorite" parameterType="int">
	    update store set
	        store_like_cnt = GREATEST(store_like_cnt - 1, 0)
	    where store_idx = #{store_idx}
	</update>
	
	<!-- 메인페이지 랜덤 출력 -->
	<select id="getStoreRanList" parameterType="String" resultType="org.storemap.domain.StoreVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM STORE 
			    WHERE STORE_ADDRESS LIKE '%'||#{store_address}||'%' AND STORE_HIDDEN = 0
			    ORDER BY dbms_random.random
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<!-- 점포 지역별 리스트 보기  -->
	<select id="getStoreAreaList" parameterType="String" resultType="org.storemap.domain.StoreVO">
		select * from store where store_area = #{store_area}
	</select>
	
	<!-- 현위치 기반 점포 리스트 보기  -->
	<select id="getStoreLocList" parameterType="int" resultMap="storeMap">
	    SELECT s.*, a.filename, a.uuid, a.attach_idx
	    FROM store s
	    LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
	    WHERE s.store_regcode LIKE #{gu} || '%'
	</select>

	
	<!-- 가장 가까운 점포 리스트 보기 -->
	<select id="getNearestStores" parameterType="org.storemap.domain.MapDTO" resultType="org.storemap.domain.StoreVO">
	    SELECT *
	    FROM (
	        SELECT s.*, 
	               6371 * ACOS(
	                   COS(RADIANS(#{lat})) * COS(RADIANS(s.store_lat)) *
	                   COS(RADIANS(s.store_lng) - RADIANS(#{lng})) +
	                   SIN(RADIANS(#{lat})) * SIN(RADIANS(s.store_lat))
	               ) AS distance
	        FROM store s
	        WHERE s.store_lat IS NOT NULL AND s.store_lng IS NOT NULL
	        ORDER BY 
	               6371 * ACOS(
	                   COS(RADIANS(#{lat})) * COS(RADIANS(s.store_lat)) *
	                   COS(RADIANS(s.store_lng) - RADIANS(#{lng})) +
	                   SIN(RADIANS(#{lat})) * SIN(RADIANS(s.store_lat))
	               )
	    )
	    WHERE ROWNUM &lt;= #{amount}
	</select>
	
	<!-- 반경 거리 내 점포 리스트 -->
	<select id="getStoresWithinDistance" parameterType="org.storemap.domain.MapDTO" resultMap="storeMap">
	    SELECT *
	    FROM (
	        SELECT s.*, a.filename, a.uuid, a.attach_idx,
	               6371 * ACOS(
	                   COS(RADIANS(#{lat})) * COS(RADIANS(s.store_lat)) *
	                   COS(RADIANS(s.store_lng) - RADIANS(#{lng})) +
	                   SIN(RADIANS(#{lat})) * SIN(RADIANS(s.store_lat))
	               ) AS distance
	        FROM store s
	        LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
	        WHERE s.store_lat IS NOT NULL 
	          AND s.store_lng IS NOT NULL
	          AND 6371 * ACOS(
	                   COS(RADIANS(#{lat})) * COS(RADIANS(s.store_lat)) *
	                   COS(RADIANS(s.store_lng) - RADIANS(#{lng})) +
	                   SIN(RADIANS(#{lat})) * SIN(RADIANS(s.store_lat))
	               ) &lt;= #{kilometer}
	        ORDER BY distance
	    )
	</select>
	
	<!-- 키워드와 지역명이 일치하는 점포 찾기 -->
	<select id="getStoreAddrKeywordList" parameterType="org.storemap.domain.MapDTO" resultMap="storeMap">
	    SELECT *
	    FROM (
	        SELECT s.*, a.filename, a.uuid, a.attach_idx,
	               6371 * ACOS(
	                   COS(RADIANS(#{lat})) * COS(RADIANS(s.store_lat)) *
	                   COS(RADIANS(s.store_lng) - RADIANS(#{lng})) +
	                   SIN(RADIANS(#{lat})) * SIN(RADIANS(s.store_lat))
	               ) AS distance
	        FROM store s
	        LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
	        WHERE s.store_hidden = 0
	          AND s.store_lat IS NOT NULL
	          AND s.store_lng IS NOT NULL
	          AND s.store_address LIKE '%' || #{keyword} || '%'
	        ORDER BY distance
	    )
	    WHERE ROWNUM &lt;= #{amount}
	</select>
	
	<!-- 키워드에 해당하는 검색어 찾기 + 반경 필터 추가 -->
	<select id="getStoreKeywordList" parameterType="org.storemap.domain.MapDTO" resultMap="storeMap">
	    SELECT *
	    FROM (
	        SELECT DISTINCT s.*, a.filename, a.uuid, a.attach_idx,
	            6371 * ACOS(
	                COS(RADIANS(#{lat})) * COS(RADIANS(s.store_lat)) *
	                COS(RADIANS(s.store_lng) - RADIANS(#{lng})) +
	                SIN(RADIANS(#{lat})) * SIN(RADIANS(s.store_lat))
	            ) AS distance,
	            CASE
	                WHEN REPLACE(s.store_address, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%' THEN 1
	                WHEN REPLACE(s.store_name, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%' THEN 2
	                WHEN EXISTS (
	                    SELECT 1 FROM menu m
	                    WHERE m.store_idx = s.store_idx
	                      AND REPLACE(m.menu_name, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	                ) THEN 3
	                ELSE 4
	            END AS priority
	        FROM store s
	        LEFT OUTER JOIN attach_file a ON s.store_image = a.uuid
	        WHERE s.store_hidden &gt;= 0
	          AND s.store_lat IS NOT NULL
	          AND s.store_lng IS NOT NULL
	          AND (
	                REPLACE(s.store_address, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	             OR REPLACE(s.store_name, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	             OR EXISTS (
	                 SELECT 1 FROM menu m
	                 WHERE m.store_idx = s.store_idx
	                   AND REPLACE(m.menu_name, ' ', '') LIKE '%' || REPLACE(#{keyword}, ' ', '') || '%'
	             )
	          )
	        ORDER BY priority, distance
	    )
	    WHERE 
	        6371 * ACOS(
	            COS(RADIANS(#{lat})) * COS(RADIANS(store_lat)) *
	            COS(RADIANS(store_lng) - RADIANS(#{lng})) +
	            SIN(RADIANS(#{lat})) * SIN(RADIANS(store_lat))
	        ) &lt;= 500
	    <if test="amount != 0">
		    AND ROWNUM &lt;= #{amount}    
	    </if>
	</select>

	
</mapper>
