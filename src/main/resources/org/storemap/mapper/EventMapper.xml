<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.storemap.mapper.EventMapper">
	<!-- 숨긴 이벤트용 맵핑 -->
	<resultMap id="eventMap" type="org.storemap.domain.EventVO">
		<id property="event_idx" column="event_idx"/>
		<result property="enter_idx" column="enter_idx"/>
		<result property="event_title" column="event_title"/>
		<result property="event_category" column="event_category"/>
		<result property="event_postcode" column="event_postcode"/>
		<result property="event_location_detail" column="event_location_detail"/>
		<result property="event_content" column="event_content"/>
		<result property="event_like_cnt" column="event_like_cnt"/>
		<result property="event_rstartdate" column="event_rstartdate"/>
		<result property="event_rstopdate" column="event_rstopdate"/>
		<result property="event_bstatdate" column="event_bstatdate"/>
		<result property="event_bstopdate" column="event_bstopdate"/>
		<result property="event_hidden" column="event_hidden"/>
		<result property="event_file" column="event_file"/>
		<result property="event_location" column="event_location"/>
		<association property="enter" resultMap="enterMap"/>
	</resultMap>
	<resultMap id="enterMap" type="org.storemap.domain.EnterVO">
		<id property="enter_idx" column="enter_idx"/>
		<result property="enter_name" column="enter_name"/>
	</resultMap>
	
	
	<!-- 메인 슬라이드 -->
	<select id="getMainSlide" resultType="org.storemap.domain.EventVO">
		    <![CDATA[
		    SELECT EVENT_IDX,EVENT_TITLE,EVENT_FILE FROM (
			    SELECT * FROM (
			        SELECT * FROM EVENT
			        WHERE 
			            EVENT_BSTOPDATE >= TRUNC(SYSDATE)
			            AND EVENT_BSTARTDATE <= TRUNC(SYSDATE)
			            AND EVENT_HIDDEN = 0
			            AND INSTR(EVENT_FILE, ',') > 0
			        ORDER BY EVENT_LIKE_CNT DESC
			    )
			    WHERE ROWNUM <= 5
			    ORDER BY DBMS_RANDOM.VALUE
			)
			WHERE ROWNUM <= 5
			]]>
	</select>
	
	<!-- 메인페이지 랜덤 -->
	<select id="getLiveEvent" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM EVENT 
			    WHERE EVENT_BSTOPDATE >= TRUNC(SYSDATE) AND EVENT_BSTARTDATE <= TRUNC(SYSDATE) AND EVENT_HIDDEN = 0
			    ORDER BY DBMS_RANDOM.RANDOM
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<select id="getSoonEvent" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM EVENT 
			    WHERE EVENT_BSTARTDATE > TRUNC(SYSDATE) AND EVENT_HIDDEN = 0
			    ORDER BY DBMS_RANDOM.RANDOM
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<!-- 메인페이지 종료 순 -->
	<select id="getListEndDate" parameterType="String" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * 
				FROM EVENT 
				WHERE 
					(TO_CHAR(EVENT_BSTARTDATE,'YYYYMMDD') <= #{searchDate} AND
				    TO_CHAR(EVENT_BSTOPDATE,'YYYYMMDD') >= #{searchDate})
				    AND EVENT_HIDDEN = 0
				ORDER BY EVENT_BSTOPDATE
			)
			WHERE ROWNUM <= 8
		]]>
	</select>
	
	<!-- MY EVENT 진행/예정 -->
	<select id="getMyEvent" parameterType="int" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM EVENT 
			WHERE 
				ENTER_IDX = #{enter_idx} 
				AND EVENT_BSTOPDATE >= TRUNC(SYSDATE)
		]]>
	</select>
	<!-- MY EVENT 종료 -->
	<select id="getMyEventEnd" parameterType="int" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM EVENT 
			WHERE 
				ENTER_IDX = #{enter_idx} 
				AND EVENT_BSTOPDATE < TRUNC(SYSDATE)
		]]>
	</select>

	<!-- 이벤트 상세보기 -->
	<select id="getEventOneView" resultType="org.storemap.domain.EventVO" parameterType="int">
		SELECT * FROM EVENT WHERE EVENT_IDX = #{EVENT_IDX}
	</select>
	
	<!-- 이벤트 승인된 점포 수  -->
	<select id="getSignList" parameterType="int" resultType="int">
		SELECT COUNT(*) 
		FROM EVENT_REQUEST 
		JOIN (
		    SELECT EDAY_IDX 
		    FROM EVENT_DAY 
		    WHERE EVENT_IDX = #{event_idx})
		USING (EDAY_IDX)
		WHERE PON > 0
	</select>
	
	<!-- 리스트 총 갯수 -->
	<select id="getListCount" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*)
	    FROM EVENT E
	
	    LEFT JOIN (
	        SELECT EVENT_IDX, COUNT(*) AS APPROVED_STORE
	        FROM EVENT_REQUEST 
	        JOIN EVENT_DAY USING (EDAY_IDX)
	        WHERE PON > 0
	        GROUP BY EVENT_IDX
	    ) ER ON E.EVENT_IDX = ER.EVENT_IDX
	
	    LEFT JOIN (
	        SELECT EVENT_IDX, SUM(STORE_MAX) AS MAX_STORE
	        FROM EVENT_DAY
	        GROUP BY EVENT_IDX
	    ) ED ON E.EVENT_IDX = ED.EVENT_IDX
		
	    WHERE]]>
	    <choose>
           	<when test="auth != '' and auth != 'user'">
	            <choose>
	            	<when test="list_state == 'open'">
	            		<![CDATA[ 
	            			(E.EVENT_RSTARTDATE > TRUNC(SYSDATE)
		            		OR  E.EVENT_RSTARTDATE <= TRUNC(SYSDATE) 
		            		AND E.EVENT_RSTOPDATE >= TRUNC(SYSDATE))
                        	AND (APPROVED_STORE != MAX_STORE 
                    		OR MAX_STORE != 0)
	            		]]>
	            	</when>
	            	<otherwise>
		                <![CDATA[
		                	E.EVENT_RSTOPDATE < TRUNC(SYSDATE) OR
		                	APPROVED_STORE = MAX_STORE
						]]> 
	            	</otherwise>
	            </choose>
           	</when>
           	<otherwise>
           		<choose>
	            	<when test="list_state == 'open'">
	            		<![CDATA[ 
	            			E.EVENT_BSTARTDATE <= TRUNC(SYSDATE) 
		            		AND E.EVENT_BSTOPDATE >= TRUNC(SYSDATE)
	            		]]>
	            	</when>
	            	<when test="list_state == 'planned'">
	            		<![CDATA[ 
	            			E.EVENT_BSTARTDATE > TRUNC(SYSDATE)
	            		]]>
	            	</when>
	            	<otherwise>
		                <![CDATA[E.EVENT_BSTOPDATE < TRUNC(SYSDATE)]]> 
	            	</otherwise>
	            </choose>
           	</otherwise>
		</choose>
        <if test="event_location != '전체'">
    		AND E.EVENT_LOCATION LIKE '%${event_location}%'
        </if>
		<if test="board_search != null and board_search != ''">
	    	AND E.EVENT_TITLE LIKE '%${board_search}%'
        </if>
        AND EVENT_HIDDEN = 0
	</select>
	
	<!-- GET IDX -->
	<select id="getIdx" parameterType="int" resultType="org.storemap.domain.EventVO">
		SELECT EVENT_IDX FROM EVENT WHERE ENTER_IDX = #{enter_idx}
	</select>
	
	<!-- GET ATTEND EVENT -->
	<select id="getAttendEvent" parameterType="int" resultType="org.storemap.domain.EventVO">
		SELECT 
		    E.EVENT_IDX,
		    E.EVENT_TITLE,
		    ED.EDAY_IDX,
		    ER.STORE_IDX,
		    ER.PON AS pon,
		    EN.ENTER_IDX,
		    EN.ENTER_ID AS enter_id,
		    EN.ENTER_NAME AS enter_name
		FROM EVENT E
		JOIN ENTER EN ON E.ENTER_IDX = EN.ENTER_IDX
		JOIN EVENT_DAY ED ON E.EVENT_IDX = ED.EVENT_IDX
		LEFT JOIN EVENT_REQUEST ER 
		    ON ER.EDAY_IDX = ED.EDAY_IDX AND ER.STORE_IDX = #{store_idx}
		WHERE E.EVENT_IDX IN (
		    SELECT E.EVENT_IDX
		    FROM EVENT E
		    JOIN EVENT_DAY ED ON E.EVENT_IDX = ED.EVENT_IDX
		    JOIN EVENT_REQUEST ER ON ER.EDAY_IDX = ED.EDAY_IDX
		    WHERE ER.STORE_IDX = #{store_idx} AND ER.PON = 1
		)
		GROUP BY 
		    E.EVENT_IDX, E.EVENT_TITLE, 
		    ED.EDAY_IDX, ER.STORE_IDX, ER.PON,
		    EN.ENTER_IDX, EN.ENTER_ID, EN.ENTER_NAME
		ORDER BY E.EVENT_IDX, ED.EDAY_IDX
	</select>
	
	<select id="getFilterList" resultType="org.storemap.domain.EventVO">
			SELECT * FROM (
		        SELECT
		            EVENT_IDX, 
		            ENTER_IDX,
		            EVENT_TITLE, 
		            EVENT_RSTARTDATE, 
		            EVENT_RSTOPDATE,
		            EVENT_BSTARTDATE,
		            EVENT_BSTOPDATE,
		            EVENT_FILE,
		            EVENT_CONTENT,
		            EVENT_LOCATION,
                    EVENT_LIKE_CNT,
                    APPROVED_STORE,
                    COMMENT_COUNT,
                    MAX_STORE,
		            ROWNUM RN
		        FROM (
		            SELECT 
		                E.EVENT_IDX, 
		                E.ENTER_IDX, 
		                E.EVENT_TITLE, 
		                E.EVENT_RSTARTDATE, 
		                E.EVENT_RSTOPDATE,
		                E.EVENT_BSTARTDATE,
		                E.EVENT_BSTOPDATE,
		                E.EVENT_FILE,
		                E.EVENT_CONTENT,
		                E.EVENT_LOCATION,
		                E.EVENT_LIKE_CNT,
                        APPROVED_STORE,
                        COMMENT_COUNT,
                        MAX_STORE
		            FROM EVENT E
		
		            LEFT JOIN (
		                SELECT EVENT_IDX, COUNT(*) APPROVED_STORE
		                FROM EVENT_REQUEST 
		                JOIN EVENT_DAY USING (EDAY_IDX)
		                WHERE PON > 0
		                GROUP BY EVENT_IDX
		            ) ER ON E.EVENT_IDX = ER.EVENT_IDX
		
		            LEFT JOIN (
		                SELECT EVENT_IDX, SUM(STORE_MAX) MAX_STORE
		                FROM EVENT_DAY
		                GROUP BY EVENT_IDX
		            ) ED ON E.EVENT_IDX = ED.EVENT_IDX
		            
		            LEFT JOIN (
		                SELECT EVENT_IDX, COUNT(*) LIKE_COUNT
		                FROM EVENT_LIKE
		                GROUP BY EVENT_IDX
		            ) EL ON E.EVENT_IDX = EL.EVENT_IDX

		            LEFT JOIN (
			            SELECT EVENT_IDX, COUNT(*) COMMENT_COUNT 
			            FROM COMMENT_EVENT 
			            GROUP BY EVENT_IDX
		            ) CE ON E.EVENT_IDX = CE.EVENT_IDX
		            
		            WHERE
		            <choose>
		            	<when test="eventFilter.auth != '' and eventFilter.auth != 'user'">
				            <choose>
				            	<when test="eventFilter.list_state == 'open'">
				            		<![CDATA[ 
				            			(E.EVENT_RSTARTDATE > TRUNC(SYSDATE)
					            		OR  E.EVENT_RSTARTDATE <= TRUNC(SYSDATE) 
					            		AND E.EVENT_RSTOPDATE >= TRUNC(SYSDATE))
			                        	AND (APPROVED_STORE != MAX_STORE 
			                    		OR MAX_STORE != 0)
				            		]]>
				            	</when>
				            	<otherwise>
					                <![CDATA[
					                	(E.EVENT_RSTOPDATE < TRUNC(SYSDATE) OR
					                	APPROVED_STORE = MAX_STORE)
				                	]]> 
				            	</otherwise>
				            </choose>
		              		<if test="eventFilter.board_search != null and eventFilter.board_search != ''">
						    	AND E.EVENT_TITLE LIKE '%${eventFilter.board_search}%'
					        </if>
					        <if test="eventFilter.event_location != '전체'">
		            			AND E.EVENT_LOCATION LIKE '%${eventFilter.event_location}%'
					        </if>
					        AND EVENT_HIDDEN = 0
			                ORDER BY
			                <if test="eventFilter.auth != '' and eventFilter.auth != 'user' and eventFilter.list_state == 'open' and eventFilter.sort_date_type == 'event_rstopdate'">
				            	<![CDATA[ 
				                CASE  
				                    WHEN 
				                    	APPROVED_STORE/MAX_STORE >= 0.8
				                    	THEN 1
				                    WHEN (
				                    	E.EVENT_RSTARTDATE <= TRUNC(SYSDATE) AND 
				                   		E.EVENT_RSTOPDATE >= TRUNC(SYSDATE)) 
				                   		THEN 2
				                    WHEN 
				                    	APPROVED_STORE >= 0 
				                    	THEN 3
				                    WHEN 
				                    	APPROVED_STORE IS NULL
				                    	THEN 4
				                    WHEN 
				                    	E.EVENT_BSTARTDATE > TRUNC(SYSDATE) 
				                    	THEN 5
				                END,
				                ]]>
					        </if>
			                <![CDATA[ ${eventFilter.sort_date_type} ASC ]]>
		            	</when>
		            	<otherwise>
		            		<choose>
				            	<when test="eventFilter.list_state == 'open'">
				            		<![CDATA[ 
				            			(E.EVENT_BSTARTDATE <= TRUNC(SYSDATE) 
					            		AND E.EVENT_BSTOPDATE >= TRUNC(SYSDATE))
				            		]]>
				            	</when>
				            	<when test="eventFilter.list_state == 'planned'">
				            		<![CDATA[E.EVENT_BSTARTDATE > TRUNC(SYSDATE)]]>
				            	</when>
				            	<otherwise>
					                <![CDATA[E.EVENT_BSTOPDATE < TRUNC(SYSDATE)]]>
				            	</otherwise>
				            </choose>
				            
				            <if test="eventFilter.board_search != null and eventFilter.board_search != ''">
						    	AND E.EVENT_TITLE LIKE '%${eventFilter.board_search}%'
					        </if>
				            <if test="eventFilter.event_location != '전체'">
		            			AND E.EVENT_LOCATION LIKE '%${eventFilter.event_location}%'
					        </if>
				         	AND EVENT_HIDDEN = 0
					        
				            ORDER BY
				            <choose>
				            	<when test="eventFilter.sort_count_type == 'lCount'">
				            		 CASE
		                                WHEN 
					                    	EVENT_LIKE_CNT >= 0 
					                    	THEN 1
						                WHEN 
					                    	EVENT_LIKE_CNT IS NULL
					                    	THEN 2
		                            END,
		                            EVENT_LIKE_CNT DESC,
				            	</when>
				            	<when test="eventFilter.sort_count_type == 'cCount'">
				            		 CASE
		                                WHEN 
					                    	COMMENT_COUNT >= 0 
					                    	THEN 1
						                WHEN 
					                    	COMMENT_COUNT IS NULL
					                    	THEN 2
		                            END,
		                            COMMENT_COUNT DESC,
				            	</when>
				            </choose>
				            
				            <choose>
				            	<when test="eventFilter.list_state == 'open'">
		                            E.EVENT_BSTOPDATE ASC
				            	</when>
				            	<when test="eventFilter.list_state == 'planned'">
		                            E.EVENT_BSTARTDATE ASC
				            	</when>
				            	<otherwise>
		                            E.EVENT_BSTOPDATE ASC
				            	</otherwise>
				            </choose>
		            	</otherwise>
		            </choose>
		        <![CDATA[)
		        WHERE ROWNUM <= #{criteria.pageNum} * #{criteria.amount}
		    )
		    WHERE RN > (#{criteria.pageNum} - 1) * #{criteria.amount}
		]]> 
	</select>
	<!-- DECODE(LETTER_READ, 0, 1) -->
	<select id="endMaxCount" parameterType="int" resultType="int">
		SELECT SUM(STORE_MAX) 
		FROM EVENT_DAY 
		WHERE EVENT_IDX = #{event_idx}
	</select>
	
	<select id="getEventList" parameterType="int" resultType="org.storemap.domain.EventVO">
		SELECT * FROM EVENT WHERE ENTER_IDX = #{enter_idx}
	</select>
	
	<!-- 키워드 검색 -->
	<select id="getEventListByKeyword" parameterType="org.storemap.domain.MapDTO" resultType="org.storemap.domain.EventVO">
	    SELECT *
	    FROM (
	        SELECT
	            E.EVENT_IDX, 
	            E.ENTER_IDX,
	            E.EVENT_TITLE, 
	            E.EVENT_RSTARTDATE, 
	            E.EVENT_RSTOPDATE,
	            E.EVENT_BSTARTDATE,
	            E.EVENT_BSTOPDATE,
	            E.EVENT_FILE,
	            E.EVENT_CONTENT,
	            E.EVENT_LOCATION,
	            NVL(ER.APPROVED_STORE, 0) AS APPROVED_STORE,
	            NVL(CE.COMMENT_COUNT, 0) AS COMMENT_COUNT,
	            NVL(EL.LIKE_COUNT, 0) AS LIKE_COUNT,
	            NVL(ED.MAX_STORE, 0) AS MAX_STORE,
	            CASE
	                WHEN E.EVENT_TITLE LIKE '%' || #{keyword} || '%' THEN 1
	                WHEN E.EVENT_LOCATION LIKE '%' || #{keyword} || '%' THEN 2
	                ELSE 3
	            END AS PRIORITY
	        FROM EVENT E
	        LEFT JOIN (
	            SELECT EVENT_IDX, COUNT(*) APPROVED_STORE
	            FROM EVENT_REQUEST 
	            JOIN EVENT_DAY USING (EDAY_IDX)
	            WHERE PON > 0
	            GROUP BY EVENT_IDX
	        ) ER ON E.EVENT_IDX = ER.EVENT_IDX
	
	        LEFT JOIN (
	            SELECT EVENT_IDX, SUM(STORE_MAX) MAX_STORE
	            FROM EVENT_DAY
	            GROUP BY EVENT_IDX
	        ) ED ON E.EVENT_IDX = ED.EVENT_IDX
	
	        LEFT JOIN (
	            SELECT EVENT_IDX, COUNT(*) LIKE_COUNT
	            FROM EVENT_LIKE
	            GROUP BY EVENT_IDX
	        ) EL ON E.EVENT_IDX = EL.EVENT_IDX
	
	        LEFT JOIN (
	            SELECT EVENT_IDX, COUNT(*) COMMENT_COUNT 
	            FROM COMMENT_EVENT 
	            GROUP BY EVENT_IDX
	        ) CE ON E.EVENT_IDX = CE.EVENT_IDX
	
	        WHERE 1 = 1
	        <if test="keyword != null and keyword != ''">
	            AND (
	                E.EVENT_TITLE LIKE '%' || #{keyword} || '%'
	                OR E.EVENT_LOCATION LIKE '%' || #{keyword} || '%'
	            )
	        </if>
	        AND E.EVENT_BSTOPDATE &gt;= TRUNC(SYSDATE)
	    )
	    <if test="amount != 0">
	        WHERE ROWNUM &lt;= #{amount}
	    </if>
	    ORDER BY PRIORITY, EVENT_BSTARTDATE DESC
	</select>

	
	<!-- 진행중, 진행예정 이벤트 불러오기 -->
	<select id="getEventListWithoutEnd" resultType="org.storemap.domain.EventVO">
	    SELECT *
	    FROM EVENT
	    WHERE EVENT_BSTOPDATE >= TRUNC(SYSDATE)
	      AND EVENT_HIDDEN = 0
	    ORDER BY EVENT_BSTARTDATE ASC
	</select>
	
	<!-- 게시글 등록 -->
	<insert id="insertEvent" parameterType="org.storemap.domain.EventVO">
    <selectKey keyProperty="event_idx" resultType="int" order="BEFORE">
    	select event_seq.nextVal from dual
    </selectKey>
    INSERT INTO event (
        event_idx,
        enter_idx,
        event_title,
        event_category,
        event_location, 
        event_location_detail, 
        event_content,
        event_like_cnt, 
        event_rstartdate, 
        event_rstopdate,
        event_bstartdate, 
        event_bstopdate, 
        event_hidden, 
        event_file, 
        event_postcode
    ) VALUES (
        #{event_idx}, 
        #{enter_idx},
        #{event_title},
        #{event_category},
        #{event_location}, 
        #{event_location_detail}, 
        #{event_content},
        0, 
        #{event_rstartdate}, 
        #{event_rstopdate},
        #{event_bstartdate}, 
        #{event_bstopdate}, 
        0, 
        #{event_file}, 
        #{event_postcode}
    )
	</insert>
	
	<update id="incrementLike" parameterType="int">
	    UPDATE event
	    SET event_like_cnt = event_like_cnt + 1
	    WHERE event_idx = #{eventIdx}
  	</update>

  	<update id="decrementLike" parameterType="int">
	    UPDATE event
	    SET event_like_cnt = CASE
	        WHEN event_like_cnt > 0 THEN event_like_cnt - 1
	        ELSE 0
	      END
	    WHERE event_idx = #{eventIdx}
  	</update>

  	<select id="getLikeCount" resultType="int">
	    SELECT event_like_cnt
	    FROM event
	    WHERE event_idx = #{eventIdx}
  	</select>
	
	<!-- 숨긴 이벤트 전체 보기 -->
	<select id="getEventHiddenList" resultMap="eventMap">
		SELECT t.enter_name, e.*
		FROM event e
		JOIN enter t ON e.enter_idx = t.enter_idx
		WHERE event_hidden = 1
	</select>
	<!-- 이벤트 숨기기 등록 -->
	<update id="hideEvent" parameterType="int">
		update event set 
			event_hidden = 1
		where event_idx = #{event_idx}
	</update>
	<!-- 이벤트 숨기기 해제 -->
	<update id="unhideEvent" parameterType="int">
		update event set 
			event_hidden = 0
		where event_idx = #{event_idx}
	</update>
  	 	
    <select id="selectEventByIdx" resultType="org.storemap.domain.EventVO" parameterType="int">
        SELECT * FROM event WHERE event_idx = #{event_idx}
    </select> 
    
    <update id="updateEventBasicInfo" parameterType="org.storemap.domain.EventVO">
        UPDATE event
        SET event_title = #{event_title},
            event_content = #{event_content},
            event_location = #{event_location}
        WHERE event_idx = #{event_idx}
    </update>
    
    <select id="getEventByIdx" resultType="org.storemap.domain.EventVO" parameterType="int">
	    SELECT *			
	    FROM event
	    WHERE event_idx = #{event_idx}
	</select>
		
	<update id="updateEventFile">
	    UPDATE event
	    SET event_file = #{event_file}
	    WHERE event_idx = #{event_idx}
	</update>
	
	<select id="getEventFileByIdx" resultType="String">
	    SELECT event_file
	    FROM event
	    WHERE event_idx = #{event_idx}
	</select>
	
	<update id="updateEventFileOnly" parameterType="org.storemap.domain.EventVO">
	    UPDATE event
	    SET event_file = #{event_file}
	    WHERE event_idx = #{event_idx}
	</update>
</mapper>
