<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.storemap.mapper.EventMapper">
	<!-- 메인페이지 랜덤 -->
	<select id="getLiveEvent" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM EVENT 
			    WHERE EVENT_BSTOPDATE >= TRUNC(SYSDATE) AND EVENT_BSTARTDATE <= TRUNC(SYSDATE)
			    ORDER BY DBMS_RANDOM.RANDOM
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<select id="getSoonEvent" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM EVENT 
			    WHERE EVENT_BSTARTDATE > TRUNC(SYSDATE)
			    ORDER BY DBMS_RANDOM.RANDOM
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<!-- 메인페이지 종료 순 -->
	<select id="getListEndDate" parameterType="String" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * 
				FROM EVENT 
				WHERE 
					TO_CHAR(EVENT_BSTARTDATE,'YYYYMMDD') <= #{searchDate} AND
				    TO_CHAR(EVENT_BSTOPDATE,'YYYYMMDD') >= #{searchDate}
				ORDER BY EVENT_BSTOPDATE
			)
			WHERE ROWNUM <= 8
		]]>
	</select>

	<!-- 이벤트 상세보기 -->
	<select id="getEventOneView" resultType="org.storemap.domain.EventVO" parameterType="int">
		SELECT * FROM EVENT WHERE EVENT_IDX = #{EVENT_IDX}
	</select>
	
	<!-- 이벤트 승인된 점포 수  -->
	<select id="getSignList" parameterType="int" resultType="int">
		SELECT COUNT(*) 
		FROM EVENT_REQUEST 
		JOIN (
		    SELECT EDAY_IDX 
		    FROM EVENT_DAY 
		    WHERE EVENT_IDX = #{event_idx})
		USING (EDAY_IDX)
		WHERE PON > 0
	</select>
	
	<!-- 리스트 총 갯수 -->
	<select id="getListCount" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*)
	    FROM EVENT E
	
	    LEFT JOIN (
	        SELECT EVENT_IDX, COUNT(*) AS APPROVED_STORE
	        FROM EVENT_REQUEST 
	        JOIN EVENT_DAY USING (EDAY_IDX)
	        WHERE PON > 0
	        GROUP BY EVENT_IDX
	    ) ER ON E.EVENT_IDX = ER.EVENT_IDX
	
	    LEFT JOIN (
	        SELECT EVENT_IDX, SUM(STORE_MAX) AS MAX_STORE
	        FROM EVENT_DAY
	        GROUP BY EVENT_IDX
	    ) ED ON E.EVENT_IDX = ED.EVENT_IDX
		
	    WHERE]]>
	    <choose>
           	<when test="auth != '' and auth != 'user'">
	            <choose>
	            	<when test="list_state == 'open'">
	            		<![CDATA[ 
	            			(E.EVENT_RSTARTDATE > TRUNC(SYSDATE)
		            		OR  E.EVENT_RSTARTDATE <= TRUNC(SYSDATE) 
		            		AND E.EVENT_RSTOPDATE >= TRUNC(SYSDATE))
                        	AND (APPROVED_STORE != MAX_STORE 
                    		OR MAX_STORE != 0)
	            		]]>
	            	</when>
	            	<otherwise>
		                <![CDATA[
		                	E.EVENT_RSTOPDATE < TRUNC(SYSDATE) OR
		                	APPROVED_STORE = MAX_STORE
						]]> 
	            	</otherwise>
	            </choose>
           	</when>
           	<otherwise>
           		<choose>
	            	<when test="list_state == 'open'">
	            		<![CDATA[ 
	            			E.EVENT_BSTARTDATE <= TRUNC(SYSDATE) 
		            		AND E.EVENT_BSTOPDATE >= TRUNC(SYSDATE)
	            		]]>
	            	</when>
	            	<when test="list_state == 'planned'">
	            		<![CDATA[ 
	            			E.EVENT_BSTARTDATE > TRUNC(SYSDATE)
	            		]]>
	            	</when>
	            	<otherwise>
		                <![CDATA[E.EVENT_BSTOPDATE < TRUNC(SYSDATE)]]> 
	            	</otherwise>
	            </choose>
           	</otherwise>
		</choose>
        <if test="event_location != '전체'">
    		AND E.EVENT_LOCATION LIKE '%${event_location}%'
        </if>
		<if test="board_search != null and board_search != ''">
	    	AND E.EVENT_TITLE LIKE '%${board_search}%'
        </if>
	</select>
	
	<!-- GET IDX -->
	<select id="getIdx" parameterType="int" resultType="int">
		SELECT EVENT_IDX FROM EVENT WHERE ENTER_IDX = #{enter_idx}
	</select>
	
	<select id="getFilterList" resultType="org.storemap.domain.EventVO">
			SELECT * FROM (
		        SELECT
		            EVENT_IDX, 
		            ENTER_IDX,
		            EVENT_TITLE, 
		            EVENT_RSTARTDATE, 
		            EVENT_RSTOPDATE,
		            EVENT_BSTARTDATE,
		            EVENT_BSTOPDATE,
		            EVENT_FILE,
		            EVENT_CONTENT,
		            EVENT_LOCATION,
                    APPROVED_STORE,
                    COMMENT_COUNT,
                    LIKE_COUNT,
                    MAX_STORE,
		            ROWNUM RN
		        FROM (
		            SELECT 
		                E.EVENT_IDX, 
		                E.ENTER_IDX, 
		                E.EVENT_TITLE, 
		                E.EVENT_RSTARTDATE, 
		                E.EVENT_RSTOPDATE,
		                E.EVENT_BSTARTDATE,
		                E.EVENT_BSTOPDATE,
		                E.EVENT_FILE,
		                E.EVENT_CONTENT,
		                E.EVENT_LOCATION,
                        APPROVED_STORE,
                        COMMENT_COUNT,
		                LIKE_COUNT,
                        MAX_STORE
		            FROM EVENT E
		
		            LEFT JOIN (
		                SELECT EVENT_IDX, COUNT(*) APPROVED_STORE
		                FROM EVENT_REQUEST 
		                JOIN EVENT_DAY USING (EDAY_IDX)
		                WHERE PON > 0
		                GROUP BY EVENT_IDX
		            ) ER ON E.EVENT_IDX = ER.EVENT_IDX
		
		            LEFT JOIN (
		                SELECT EVENT_IDX, SUM(STORE_MAX) MAX_STORE
		                FROM EVENT_DAY
		                GROUP BY EVENT_IDX
		            ) ED ON E.EVENT_IDX = ED.EVENT_IDX
		            
		            LEFT JOIN (
		                SELECT EVENT_IDX, COUNT(*) LIKE_COUNT
		                FROM EVENT_LIKE
		                GROUP BY EVENT_IDX
		            ) EL ON E.EVENT_IDX = EL.EVENT_IDX

		            LEFT JOIN (
			            SELECT EVENT_IDX, COUNT(*) COMMENT_COUNT 
			            FROM COMMENT_EVENT 
			            GROUP BY EVENT_IDX
		            ) CE ON E.EVENT_IDX = CE.EVENT_IDX
		            
		            WHERE
		            <choose>
		            	<when test="eventFilter.auth != '' and eventFilter.auth != 'user'">
				            <choose>
				            	<when test="eventFilter.list_state == 'open'">
				            		<![CDATA[ 
				            			(E.EVENT_RSTARTDATE > TRUNC(SYSDATE)
					            		OR  E.EVENT_RSTARTDATE <= TRUNC(SYSDATE) 
					            		AND E.EVENT_RSTOPDATE >= TRUNC(SYSDATE))
			                        	AND (APPROVED_STORE != MAX_STORE 
			                    		OR MAX_STORE != 0)
				            		]]>
				            	</when>
				            	<otherwise>
					                <![CDATA[
					                	E.EVENT_RSTOPDATE < TRUNC(SYSDATE) OR
					                	APPROVED_STORE = MAX_STORE
				                	]]> 
				            	</otherwise>
				            </choose>
		              		<if test="eventFilter.board_search != null and eventFilter.board_search != ''">
						    	AND E.EVENT_TITLE LIKE '%${eventFilter.board_search}%'
					        </if>
					        <if test="eventFilter.event_location != '전체'">
		            			AND E.EVENT_LOCATION LIKE '%${eventFilter.event_location}%'
					        </if>
			                ORDER BY
			                <if test="eventFilter.auth != '' and eventFilter.auth != 'user' and eventFilter.list_state == 'open' and eventFilter.sort_date_type == 'event_rstopdate'">
				            	<![CDATA[ 
				                CASE
				                    WHEN (
				                    	E.EVENT_RSTARTDATE <= TRUNC(SYSDATE) AND 
				                   		E.EVENT_RSTOPDATE >= TRUNC(SYSDATE)) 
				                   		THEN 1
				                    WHEN 
				                    	E.EVENT_BSTARTDATE > TRUNC(SYSDATE) 
				                    	THEN 2
				                END,
				                CASE  
				                    WHEN 
				                    	APPROVED_STORE >= 0 
				                    	THEN 1
				                    WHEN 
				                    	APPROVED_STORE IS NULL
				                    	THEN 2
				                END,
				                ]]>
					        </if>
			                <![CDATA[ ${eventFilter.sort_date_type} ASC ]]>
		            	</when>
		            	<otherwise>
		            		<choose>
				            	<when test="eventFilter.list_state == 'open'">
				            		<![CDATA[ 
				            			(E.EVENT_BSTARTDATE <= TRUNC(SYSDATE) 
					            		AND E.EVENT_BSTOPDATE >= TRUNC(SYSDATE))
				            		]]>
				            	</when>
				            	<when test="eventFilter.list_state == 'planned'">
				            		<![CDATA[E.EVENT_BSTARTDATE > TRUNC(SYSDATE)]]>
				            	</when>
				            	<otherwise>
					                <![CDATA[E.EVENT_BSTOPDATE < TRUNC(SYSDATE)]]>
				            	</otherwise>
				            </choose>
				            
				            <if test="eventFilter.board_search != null and eventFilter.board_search != ''">
						    	AND E.EVENT_TITLE LIKE '%${eventFilter.board_search}%'
					        </if>
				            <if test="eventFilter.event_location != '전체'">
		            			AND E.EVENT_LOCATION LIKE '%${eventFilter.event_location}%'
					        </if>
					        
				            ORDER BY
				            <choose>
				            	<when test="eventFilter.sort_count_type == 'lCount'">
				            		 CASE
		                                WHEN 
					                    	LIKE_COUNT >= 0 
					                    	THEN 1
						                WHEN 
					                    	LIKE_COUNT IS NULL
					                    	THEN 2
		                            END,
		                            LIKE_COUNT DESC,
				            	</when>
				            	<when test="eventFilter.sort_count_type == 'cCount'">
				            		 CASE
		                                WHEN 
					                    	COMMENT_COUNT >= 0 
					                    	THEN 1
						                WHEN 
					                    	COMMENT_COUNT IS NULL
					                    	THEN 2
		                            END,
		                            COMMENT_COUNT DESC,
				            	</when>
				            </choose>
				            
				            <choose>
				            	<when test="eventFilter.list_state == 'open'">
		                            E.EVENT_BSTOPDATE ASC
				            	</when>
				            	<when test="eventFilter.list_state == 'planned'">
		                            E.EVENT_BSTARTDATE ASC
				            	</when>
				            	<otherwise>
		                            E.EVENT_BSTOPDATE ASC
				            	</otherwise>
				            </choose>
		            	</otherwise>
		            </choose>
		        <![CDATA[)
		        WHERE ROWNUM <= #{criteria.pageNum} * #{criteria.amount}
		    )
		    WHERE RN > (#{criteria.pageNum} - 1) * #{criteria.amount}
		]]> 
	</select>
	<!-- DECODE(LETTER_READ, 0, 1) -->
	<select id="endMaxCount" parameterType="int" resultType="int">
		SELECT SUM(STORE_MAX) 
		FROM EVENT_DAY 
		WHERE EVENT_IDX = #{event_idx}
	</select>
	
	<!-- 게시글 등록 -->
	<insert id="insertEvent" parameterType="org.storemap.domain.EventVO">
    INSERT INTO event (
        event_idx,
        enter_idx,
        event_title,
        event_category,
        event_location, 
        event_location_detail, 
        event_content,
        event_like_cnt, 
        event_rstartdate, 
        event_rstopdate,
        event_bstartdate, 
        event_bstopdate, 
        event_hidden, 
        event_file, 
        event_postcode
    ) VALUES (
        event_seq.nextVal, 
        #{enter_idx},
        #{event_title},
        #{event_category},
        #{event_location}, 
        #{event_location_detail}, 
        #{event_content},
        0, 
        #{event_rstartdate}, 
        #{event_rstopdate},
        #{event_bstartdate}, 
        #{event_bstopdate}, 
        0, 
        #{event_file, jdbcType=VARCHAR}, 
        #{event_postcode}
    )
	</insert>
	
</mapper>
