<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.storemap.mapper.EventMapper">
	<!-- 메인페이지 랜덤 -->
	<select id="getLiveEvent" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM EVENT 
			    WHERE EVENT_BSTOPDATE >= SYSDATE AND EVENT_BSTARTDATE <= SYSDATE
			    ORDER BY DBMS_RANDOM.RANDOM
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<select id="getSoonEvent" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * FROM EVENT 
			    WHERE EVENT_BSTARTDATE > SYSDATE
			    ORDER BY DBMS_RANDOM.RANDOM
			)
			WHERE ROWNUM <= 10
		]]>
	</select>
	
	<!-- 메인페이지 종료 순 -->
	<select id="getListEndDate" parameterType="String" resultType="org.storemap.domain.EventVO">
		<![CDATA[
			SELECT * FROM (
			    SELECT * 
				FROM EVENT 
				WHERE 
					TO_CHAR(EVENT_BSTARTDATE,'YYYYMMDD') <= #{searchDate} AND
				    TO_CHAR(EVENT_BSTOPDATE,'YYYYMMDD') >= #{searchDate}
				ORDER BY EVENT_BSTOPDATE
			)
			WHERE ROWNUM <= 8
		]]>
	</select>

	<!-- 이벤트 상세보기 -->
	<select id="getEventOneView" resultType="org.storemap.domain.EventVO" parameterType="int">
		SELECT * FROM EVENT WHERE EVENT_IDX = #{EVENT_IDX}
	</select>
	
	<!-- 이벤트 승인된 점포 수  -->
	<select id="getSignList" parameterType="int" resultType="int">
		SELECT COUNT(*) 
		FROM EVENT_REQUEST 
		JOIN (
		    SELECT EDAY_IDX 
		    FROM EVENT_DAY 
		    WHERE EVENT_IDX = #{event_idx})
		USING (EDAY_IDX)
		WHERE PON > 0
	</select>
	
	<!-- 리스트 총 갯수 -->
	<select id="getListCount" resultType="int">
		<![CDATA[ 
		SELECT COUNT(*)
	    FROM EVENT E
	
	    LEFT JOIN (
	        SELECT EVENT_IDX, COUNT(*) AS APPLY_COUNT
	        FROM EVENT_REQUEST 
	        JOIN EVENT_DAY USING (EDAY_IDX)
	        WHERE PON > 0
	        GROUP BY EVENT_IDX
	    ) ER ON E.EVENT_IDX = ER.EVENT_IDX
	
	    LEFT JOIN (
	        SELECT EVENT_IDX, SUM(STORE_MAX) AS MAX_COUNT
	        FROM EVENT_DAY
	        GROUP BY EVENT_IDX
	    ) ED ON E.EVENT_IDX = ED.EVENT_IDX
		
	    WHERE]]>
	    <choose>
           	<when test="list_state == 'open'">
           		<![CDATA[ 
            		E.EVENT_BSTARTDATE <= SYSDATE 
            		AND E.EVENT_BSTOPDATE >= SYSDATE
            		AND E.EVENT_RSTOPDATE > SYSDATE
                    AND (APPLY_COUNT != MAX_COUNT 
	                    OR APPLY_COUNT IS NULL)
           		]]>
           	</when>
           	<when test="list_state == 'planned'">
           		<![CDATA[ E.EVENT_BSTARTDATE > SYSDATE]]>
           	</when>
           	<otherwise>
                <![CDATA[E.EVENT_BSTOPDATE < SYSDATE]]> 
           	</otherwise>
		</choose>
       	<if test="board_search != null and board_search != ''">
    		AND E.EVENT_TITLE LIKE '%${board_search}%'
        </if>
	</select>
	
	<!-- GET IDX -->
	<select id="getIdx" parameterType="int" resultType="int">
		SELECT EVENT_IDX FROM EVENT WHERE ENTER_IDX = #{enter_idx}
	</select>
	
	<select id="getFilterList" resultType="org.storemap.domain.EventVO">
		<![CDATA[ 
			SELECT * FROM (
		        SELECT
		            EVENT_IDX, 
		            ENTER_IDX,
		            EVENT_TITLE, 
		            EVENT_RSTARTDATE, 
		            EVENT_RSTOPDATE,
		            EVENT_BSTARTDATE,
		            EVENT_BSTOPDATE,
                     APPLY_COUNT,
                        MAX_COUNT,
		            ROWNUM RN
		        FROM (
		            SELECT 
		                E.EVENT_IDX, 
		                E.ENTER_IDX, 
		                E.EVENT_TITLE, 
		                E.EVENT_RSTARTDATE, 
		                E.EVENT_RSTOPDATE,
		                E.EVENT_BSTARTDATE,
		                E.EVENT_BSTOPDATE,
                        APPLY_COUNT,
                        MAX_COUNT
		            FROM EVENT E
		
		            LEFT JOIN (
		                SELECT EVENT_IDX, COUNT(*) APPLY_COUNT
		                FROM EVENT_REQUEST 
		                JOIN EVENT_DAY USING (EDAY_IDX)
		                WHERE PON > 0
		                GROUP BY EVENT_IDX
		            ) ER ON E.EVENT_IDX = ER.EVENT_IDX
		
		            LEFT JOIN (
		                SELECT EVENT_IDX, SUM(STORE_MAX) MAX_COUNT
		                FROM EVENT_DAY
		                GROUP BY EVENT_IDX
		            ) ED ON E.EVENT_IDX = ED.EVENT_IDX
                    
		            WHERE 
		            ]]>
		            <choose>
		            	<when test="eventFilter.list_state == 'open'">
		            		<![CDATA[ 
			            		E.EVENT_BSTARTDATE <= SYSDATE 
			            		AND E.EVENT_BSTOPDATE >= SYSDATE
			            		AND E.EVENT_RSTOPDATE > SYSDATE
	                        	AND (APPLY_COUNT != MAX_COUNT 
	                    			OR APPLY_COUNT IS NULL)
		            		]]>
		            	</when>
		            	<when test="eventFilter.list_state == 'planned'">
		            		<![CDATA[ E.EVENT_BSTARTDATE > SYSDATE]]>
		            	</when>
		            	<otherwise>
			                <![CDATA[E.EVENT_BSTOPDATE < SYSDATE]]> 
		            	</otherwise>
		            </choose>
              		<if test="eventFilter.board_search != null and eventFilter.board_search != ''">
				    	AND E.EVENT_TITLE LIKE '%${eventFilter.board_search}%'
			        </if>
		            <![CDATA[ 
	                ORDER BY ${eventFilter.sort_type} ASC
		        )
		        WHERE ROWNUM <= #{criteria.pageNum} * #{criteria.amount}
		    )
		    WHERE RN > (#{criteria.pageNum} - 1) * #{criteria.amount}
		]]> 
	</select>
	
	<select id="endMaxCount" parameterType="int" resultType="int">
		SELECT SUM(STORE_MAX) 
		FROM EVENT_DAY 
		WHERE EVENT_IDX = #{event_idx}
	</select>
	
	<!-- 게시글 등록 -->
	<insert id="insertEvent" parameterType="org.storemap.domain.EventVO">
    INSERT INTO event (
        event_idx,enter_idx, event_title, event_category,
        event_location, event_location_detail, event_content,
        event_like_cnt, event_rstartdate, event_rstopdate,
        event_bstartdate, event_bstopdate, event_hidden, event_file
    ) VALUES (
        event_seq.nextval,#{enter_idx}, #{event_title}, #{event_category},
        #{event_location}, #{event_location_detail}, #{event_content},
        0, #{event_rstartdate}, #{event_rstopdate},
        #{event_bstartdate}, #{event_bstopdate}, 0, #{event_file}
    )
	</insert>
	
</mapper>
